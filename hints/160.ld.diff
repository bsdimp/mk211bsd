--- /usr/src/bin/ld.c+	1988-08-14 02:09:04.000000000 -0600
+++ /usr/src/bin/ld.c	2020-06-24 20:42:07.847200000 -0600
@@ -254,6 +254,7 @@
 long	ladd();
 int	delexit();
 long	lseek();
+long	atol();
 char	*savestr();
 char	*malloc();
 char	*mktemp();
@@ -542,9 +543,10 @@
 	case 1:
 		error(-1,
 "warning: archive has no table of contents; add one using ranlib(1)");
-		nloc = 1;
+		nloc = SARMAG >> 1;
 		while (step(nloc))
-			nloc += (archdr.ar_size + sizeof(archdr) + 1) >> 1;
+			nloc += (sizeof(archdr) +
+			    atol(archdr.ar_size) + 1) >> 1;
 		break;
 
 	/*
@@ -555,17 +557,16 @@
 	 * when there is a table of contents!)
 	 */
 	case 2:
-		tnum = archdr.ar_size / sizeof(struct tab);
+		tnum = atol(archdr.ar_size) / sizeof(struct tab);
 		if (tnum >= TABSZ)
 			error(1, "toc buffer too small");
-		lseek(infil, (long)(sizeof(filhdr.a_magic) + sizeof(archdr)), 0);
+		lseek(infil, (long)(SARMAG + sizeof(archdr)), 0);
 		read(infil, (char *)tab, tnum * sizeof(struct tab));
 		while (ldrand())
-			;
+			continue;
 		libp->loc = -1;
 		libp++;
 		break;
-
 	/*
 	 * Table of contents is out of date, so search
 	 * as a normal library (but skip the __.SYMDEF file).
@@ -573,9 +574,10 @@
 	case 3:
 		error(-1,
 "warning: table of contents for archive is out of date; rerun ranlib(1)");
-		for (nloc = 1 + ((archdr.ar_size + sizeof(archdr) + 1) >> 1);
-		    step(nloc);
-			nloc += (archdr.ar_size + sizeof(archdr) + 1) >> 1);
+		nloc = SARMAG >> 1;
+		do
+			nloc += (sizeof(archdr) + atol(archdr.ar_size)) >> 1;
+		while (step(nloc));
 		break;
 	}
 	close(infil);
@@ -913,7 +915,7 @@
 	} else {	/* scan archive members referenced */
 		for (lp = libp; lp->loc != -1; lp++) {
 			dseek(&text, lp->loc, sizeof archdr);
-			mget((int *)&archdr, sizeof archdr);
+			getarhdr();
 			mkfsym(archdr.ar_name);
 			load2(lp->loc + (sizeof archdr) / 2);
 		}
@@ -1091,7 +1093,8 @@
 {
 	register u_int n, *p;
 	register SYMBOL *sp, *symp;
-
+	long before, after;
+ 
 	if (numov) {
 		/* int aovno = adrof("__ovno");		XXX KB */
 		int aovhndlr[NOVL+1];
@@ -1127,6 +1130,9 @@
 		copy(&troutb);
 		copy(&droutb);
 	}
+
+	flush(&toutb);
+	before = lseek(toutb.fildes , 0L, 1);
 	if (sflag==0) {
 		if (xflag==0)
 			copy(&soutb);
@@ -1146,7 +1152,27 @@
 			p++;
 		}
 	}
+/*
+ * the following is a workaround ("kludge") to insure that the
+ * correct size of the symbol table is written to the header.  this
+ * was occasioned by noticing that the value of a_syms for /unix showed
+ * 0115200 (39552) instead of 0115544 (39780).  somewhere 19 symbols were
+ * not being counted - (oh where oh where have the symbols gone...?;-))
+ * but they were being written out!  Granted, it is not proper to
+ * treat the symptom instead of the problem, but this works, and if you
+ * fix it for real i'd like a copy of ld.c - Steven M. Schultz
+ *
+ * I really think this should be calculated anyhow, makes as much sense
+ * as trying to maintain counts everywhere else.
+*/
+
 	flush(&toutb);
+	after = lseek(toutb.fildes, 0L, 1);
+	lseek(toutb.fildes, 0L, 0);
+	read(toutb.fildes, &filhdr, sizeof (filhdr));
+	filhdr.a_syms = after - before;
+	lseek(toutb.fildes, 0L, 0);
+	write(toutb.fildes, &filhdr, sizeof (filhdr));
 	close(toutb.fildes);
 	if (!ofilfnd) {
 		unlink("a.out");
@@ -1171,6 +1197,18 @@
 
 }
 
+getarhdr()
+{
+	register char *cp;
+
+	mget((char *)&archdr, sizeof archdr);
+	for (cp=archdr.ar_name; cp<&archdr.ar_name[sizeof(archdr.ar_name)];)
+		if (*cp++ == ' ') {
+			cp[-1] = 0;
+			return;
+		}
+}
+
 mget(aloc, an)
 int *aloc;
 {
@@ -1251,6 +1289,7 @@
 getfile(acp)
 char *acp;
 {
+	char arcmag[SARMAG+1];
 	struct stat stb;
 
 	archdr.ar_name[0] = '\0';
@@ -1266,18 +1305,20 @@
 	page[0].nuser = page[1].nuser = 0;
 	text.pno = reloc.pno = (PAGE *)&fpage;
 	fpage.nuser = 2;
-	dseek(&text, 0L, 2);
+	dseek(&text, 0L, SARMAG);
 	if (text.size <= 0)
 		error(1, "premature EOF");
-	if (get(&text) != ARMAG)
-		return (0);			/* regular file */
-	dseek(&text, 1L, sizeof archdr);	/* word addressing */
+	mget((char *)arcmag, SARMAG);
+	arcmag[SARMAG] = 0;
+	if (strcmp(arcmag, ARMAG))
+		return (0);
+	dseek(&text, (long)SARMAG>>1, sizeof archdr); /* word addressing */
 	if (text.size <= 0)
-		return (1);			/* regular archive */
-	mget((int *)&archdr, sizeof archdr);
+		return (1);
+	getarhdr();
 	if (strncmp(archdr.ar_name, "__.SYMDEF", sizeof(archdr.ar_name)) != 0)
-		return (1);			/* regular archive */
-	return (stb.st_mtime > archdr.ar_date ? 3 : 2);
+		return (1);
+	return (stb.st_mtime > atol(archdr.ar_date) ? 3 : 2);
 }
 
 /*
