#!/bin/sh

set -e
. vars

# here to the end of pprint stolen from nanobsd.
export PPLEVEL=1
export STARTTIME=`date +%s`
export APOUT_ROOT
# File descriptor 3 is used for logging output
exec 3>&1
# Progress Print
#	Print $2 at level $1.
pprint ( ) (
    lvl=$1
    shift
    if [ "$lvl" -le $PPLEVEL ]; then
	runtime=$(( `date +%s` - $STARTTIME ))
	printf "%s %.${lvl}s %s\n" "`date -u -r $runtime +%H:%M:%S`" "#####" "$*" 1>&3
    fi
)

extract_dump() {
    # Even with this icky code, this is imperfect: symlinks don't work
    local r fn inode

    r=$1
    $APOUT $TOOLBIN/dumpdir f $r | tail +5 | grep -v '/dev/[a-z]' | fgrep -v .. | \
	( while read inode fn; do
	      fn=${fn#/}
	      case $fn in
		  */.)
		      mkdir ${fn%%/.} ;;
		  *)
		      echo 1 | $APOUT $TOOLBIN/restor xf $r ${fn}
		      mv $inode $fn
		      ;;
	      esac
	  done )
    # restor is impefect and leaves divots behind
    rm -f rst*
}

cleanup() {
    # Cleanup old stuff -- we recreate it all from extant artifacts with this script
    # and some helpers
    chmod -R +w $TAPE211 $TOOLS $ROOT211 $TAPE2101 $ROOT2101
    rm -rf $TAPE211 $TOOLS $ROOT211 $TAPE2101 $ROOT2101 ${PATCHDIR}
}

mktools() {
    # Create tools areas
    mkdir -p $TOOLS $TOOLBIN

    # We need to use the pdp-11 a.out user-mode emulator.  Copy it from the
    # unix-jun72 effort and build.
    (
	rm -rf $APOUT_SRC
	mkdir -p $APOUT_SRC
	cd $APOUT_SRC
	tar -xv -f ${TUHS}/Distributions/Research/Dennis_v1/svntree-20081216.tar.gz \
	    --strip-components 3 unix72/tools/apout
	# fixes to make it happier with restor
	patch -p1 < $TOP/apout.patch
	make clean
	# gcc fails for me so force clang
	make CC=clang apout
    )

    # Need to extract two helper programs. We use the actual 2.11 binaries to
    # minimize porting and maximize compatibility. This assumes that we have a
    # libarchive based tar. Thankfully, TUHS has an easy to get copy of
    # the most use version of these programs.
    tar xvf ${UCB}/2.11BSD/root.afio.gz sbin/dumpdir sbin/restor
    mv sbin/* $TOOLBIN
    rmdir sbin
}

unpack_211() {
    #
    # Unpack the pl195 tape. This is a series of files needed to bootstreap 2.11BSD
    #	The format of a 2.11BSD boot tape is:
    #
    #	File	Blocksize	Content
    #	0	512		mtboot
    #		512		mtboot
    #		512		boot
    #	1	1024		disklabel.bin
    #	2	1024		mkfs.bin
    #	3	1024		restor.bin
    #	4	1024		icheck.bin
    #	5	10240		root.dmp	/ dump, need to use restor to get files
    #	6	10240		usr.tar		/usr w/o /usr/src or /usr/include
    #	7	10240		sys.tar		/usr/src/sys /usr/src/include
    #	8	10240		src.tar		/usr/src/{everything-else}
    # 
    [ -d $TAPE211 ] || (
	mkdir $TAPE211
	cd $TAPE211
	tar xvf ${UCB}/2.11BSD-pl195.tar
	gunzip root.dmp.gz
    )

    # Now 'fake' install the 2.11BSD system into $ROOT211. This does nothing to
    # configure the 'image'. The patches touch the entire directory tree, so
    # this is the easiest way to cope. But looking at the shell below, it's
    # far from the cleanest way to do this...
    # Also, have a kludge for running this a bunch where we just restore the
    # root from the cached tarball...
    if [ -d $ROOT211 ] ; then
	if [ -r $ROOT211TAR ]; then
	    pprint 1 Refreshing 2.11 root from tarball
	    rm -rf $ROOT211
	    (cd $TOP ; sudo tar xf $ROOT211TAR)
	fi
    else
	(
	    mkdir $ROOT211
	    cd $ROOT211
	    # can't use TAPE211 because paths grow too long
	    extract_dump ../tape-2.11/root.dmp
	    # symlinks don't work, but they are important for the reverse patching,
	    # so fix all known ones. Thankfully, all of them extract with a file
	    # containing a path to the target. There's others in the system, but
	    # tar gets them right.
	    for i in vmunix sys etc/termcap etc/crash bin/sort; do
		ln -sf $(cat $i) $i
	    done
	    mkdir usr
	    (
		cd usr
		tar xvf $TAPE211/usr.tar.gz	# restore /usr
		mkdir src
		cd src
		tar xvf $TAPE211/sys.tar.gz	# restore /usr/src/sys and /usr/src/include
		tar xvf $TAPE211/src.tar.gz	# rest of /usr/src
	    )

	    # Some 'fixes' for things that make this root less pure, but that allow
	    # for the patch process to work.

	    # big hammer, make this relative
	    ln -sf usr/src/sys sys
	    # This messes up permissions, but lets more patches succeed.
	    chmod -R +w $ROOT211
	)
	if [ ! -r $ROOT211TAR ]; then
	    (cd $TOP ; sudo tar xf $ROOT211TAR $ROOT211)
	fi
    fi
}

unpack_2101() {
    #
    # As we reconstruct, we'll need some files from 2.10.1.
    #
    # Tape 1
    # File	RecSize	   #Recs	Content
    # ----	-------    -----	-------
    # 0	512	   41		tapeboot,tapeboot,boot
    # 1	1024	   28		mkfs
    # 2	1024	   27		restor
    # 3	1024	   26		icheck
    # 4	10240	   451		dump of root fs
    # 5	10240	   2277		tar of /usr without usr/src
    # 6	10240	   466		tar of /usr/src/{sys,include}
    # Tape 2
    # File	RecSize	   #Recs	Content
    # ----	-------    -----	-------
    # 0	10240	   3959		tar of /usr without /usr/src
    #	The exact tape files are in the two directories 'tape1' and 'tape2'
    #	respectively.  The files have been gzip'd to save space.
    #	In the directory 'root' is the unpacked version of the system.
    #
    # Turns out that the source is extracted wrong in the root file, leading to confusion,
    # so we'll do the whole thing we do for 2.11 for convenience.
    #
    (
	mkdir $TAPE2101
	cd $TAPE2101
	tar xvf ${UCB}/2.10.1bsd.tar
	rm -f tape1/file4
	gunzip tape1/file4.gz		# root.dump file
    )

    # Now 'fake' install the 2.10.1BSD system into $ROOT2101. This does nothing to
    # configure the 'image'. The patches touch the entire directory tree, so
    # this is the easiest way to cope. But looking at the shell below, it's
    # far from the cleanest way to do this...
    (
	mkdir $ROOT2101
	cd $ROOT2101
	extract_dump ../tape-2.10.1/tape1/file4
	# symlinks don't work, so fix all known ones. Thankfully, all of them
	# extract with a file containing a path to the target. There's others in
	# the system, but tar gets them right.
	for i in vmunix sys etc/termcap etc/crash bin/sort; do
	    ln -sf $(cat $i) $i
	done
	mkdir usr
	(
	    cd usr
	    tar xvf $TAPE2101/tape1/file5.gz	# restore /usr
	    mkdir src
	    cd src
	    tar xvf $TAPE2101/tape1/file6.gz	# restore /usr/src/sys and /usr/src/include
	    tar xvf $TAPE2101/tape2/file0.gz	# rest of /usr/src
	)
    )
}

# Unpack just enough of V7 to assemble the putative 2.11 assembler since
# newer assemblers barf on assembling it.
unpack_v7() {
    pprint 1 "Extracting minimal v7 to boostrap as"
    rm -rf $ROOTV7
    mkdir $ROOTV7
    mkdir $ROOTV7/tmp
    cd $ROOTV7
    tar xvf $TAPEV7 bin/as bin/ld bin/nm bin/ar lib
}

extract_patches() {
    ( set -x
	mkdir $PATCHDIR
	cd $PATCHDIR
	for i in $(jot 19 1); do
	    j=$(printf %02d $i)
	    tar xf $PATCHSRC/${j}0-${j}9.tar.bz2
	done
	tar xf $PATCHSRC/001-009.tar.bz2
	# we're at patch 195, so remove the rest
	rm -f 196 197 198 199
	# the catchup patch to 80 shows some patches were missing, regen
	mkdir -p $TEMPDIR/catch-up
	chdir $TEMPDIR/catch-up
	tar xvf $PATCHSRC/usr_update.tar.bz2
	tar xvf patches.tar.bz2
#	mkdir usr
#	( cd usr; tar xvf ../usr.update.tar.Z )
	#
	# Recover patch 18a csh size reduction...
	#
	sed -ne '/\/old\/src\/bin\/csh\/alloc\.c/,/\/old\/src\/bin\/dd\.c/p' < xab > $PATCHDIR/18a
	#
	# changes to warp
	#
	sed -ne '/\/old\/src\/games\/warp\/Makefile/,/\/old\/src\/games\/words\/Makefile/p' < xac > $PATCHDIR/42a
	#
	# Patch 78 had an update to rn, so create it as 78a
	#
	sed -ne '/\/old\/src\/new\/rn\/addng\.c/,$p' < xas > $PATCHDIR/78a
	#
	# And now the trickiest one... the tftp changes. These were made a few
	# days after patch 1 (May 4, 1991) on May 15th, but do not appear in the
	# official patch lists from sms. But they are in the catch up patch in
	# several parts. Plus, the catch-up replaces the man pages rather than
	# patches them. I've opted, instead, to patch them so I generate
	# patches from the extracted files against 2.10.1, but with the
	# source moved.
	#
	sed -ne '/\/old\/src\/etc\/tftpd\/tftpd\.c/,/\/old\/src\/etc\/tunefs\.c/p' < xac > $PATCHDIR/1a
	sed -ne '/\/old\/src\/ucb\/tftp\/main\.c/,/\/old\/src\/ucb\/vlp\/vlp\.c/p' < xas >> $PATCHDIR/1a
	#
	# lib/uucp/USERFILE was changed just after the release to remove
	# local hacks
	#
	sed -ne '/\/old\/lib\/uucp\/USERFILE/,/\/old\/src\/bin\/adb\/opset\.c/p' < xaa > $PATCHDIR/1b
	# Small hack to get the 37a.unpatch script to run.
	touch $PATCHDIR/37a
	#
	# There was an update to kern_acct.c to stop writting accounting logs when the
	# free space got too low.
	#
	sed -ne '/\/old\/src\/sys\/h\/acct\.h/,/\/old\/src\//p' < xai > $PATCHDIR/53a
	sed -ne '/\/old\/src\/sys\/sys\/kern_acct\.c/,/\/old\/src\//p' < xaq >> $PATCHDIR/53a
    )
}

# helper routine to recover from 2.10.1BSD
from2.10.1() {
    local i

    for i; do
	echo "Patch $p | $i | 2.10.1BSD | " >> $RECOVERY_LOG
	echo "Patch $p: Recovering $i from 2.10.1BSD"
	pprint 1 "Recovering $i from 2.10.1BSD"
	cp -p $ROOT2101/$i $ROOT211/$i
	chmod +w $ROOT211/$i
    done
}

from4.3() {
    local i tb f

    for i; do
	cd $TEMP
	echo "Patch $p | $i | 4.3BSD | " >> $RECOVERY_LOG
	echo "Patch $p: Recovering $i from 4.3BSD"
	pprint 1 "Recovering $i from 4.3BSD"
	f=${i#/}
	case $f in
	    usr/src/sys/*)
		tb=srcsys.tar.gz
		f=${f#usr/src/sys/}
		mkdir -p usr/src/sys
		cd usr/src/sys
		;;
	    usr/src/*)
		tb=src.tar.gz
		f=${f#usr/src/}
		mkdir -p usr/src
		cd usr/src
		;;
	    *)
		die Bad file $i
		;;
	esac
	tar xvf $UCB/4.3BSD/$tb $f
	chmod +w $f
    done
    cd $TEMP
    tar cf - usr/src | (cd $ROOT211 ; tar xvf -)
}

bail() {
    pprint 1 $*
    echo $*
    exit 1
}

undo_patch_level() (
    local p patch s
    p=$1
    patch=$PATCHDIR/$p

    export TEMP=$TEMPDIR/$p
    mkdir -p $TEMP
    cd $TEMP
    case $p in
	*.tar)
	    pprint 1 "patch $p: tarball of patches"
	    echo "patch $p: tarball of patches"
	    cd $TEMP
	    tar xvf $patch
	    pp=${p%%.tar}
	    cd $pp
	    chmod -R +w .
	    cwd=$(pwd)
	    if [ -r $HINTSDIR/${pp}.unpatch ] ; then
		pprint 1 massaging patches with ${pp}.unpatch
		echo massaging patches with ${pp}.unpatch
		. $HINTSDIR/${pp}.unpatch
	    else
		pprint 1 nothing
	    fi
	    for i in b.*; do
		( cd ${ROOT211}
		  echo patch -V none -R -p1 ${cwd}/$i
		  patch -V none -R -p1 < ${cwd}/$i
		)
	    done
	    ;;
	*)
	    if ! [ -f $PATCHDIR/$p ] || grep -q '^#! */bin/sh' $PATCHDIR/$p; then
		# shar file were always complex, though in a few
		# degenerate cases were just extract a patch file
		# of varying names and apply it. Other times one
		# had to do more. The unshar script is expected
		# to undo all that.
		s=$HINTSDIR/${p}.unshar
		[ -r $s ] || bail $p.unshar not found
		pprint 1 "patch $p: undoing shar with $s"
		echo "patch $p: undoing shar with $s"
		. $s
	    else
		pprint 1 "patch $p: simple patch"
		(
		    cd $ROOT211
		    if [ -r $HINTSDIR/${p}.unpatch ] ; then
			# Some patches look like pure patches, but
			# in reality the instructions had people do
			# more than just apply the patch, and the
			# unpatch file is supposed to sort it out
			# either by patch -R + commands or by just
			# doing commands to restore the old state.
			pprint 1 undoing patch with ${p}.unpatch
			echo undoing patch with ${p}.unpatch
			. $HINTSDIR/${p}.unpatch
		    else
			# Some patches aren't relative to the root
			# of the tree, so the setup routines allow
			# us to cd before apply the patch. Though
			# it may make sense to fold this into the
			# unpatch mechanism instead.
			if [ -r $HINTSDIR/${p}.setup ] ; then
			    pprint 1 setup to unapply $p with $p.setup
			    echo setup to unapply $p with $p.setup
			    . $HINTSDIR/${p}.setup
			fi
			pprint 1 "Reverse applying $PATCHDIR/$p"
			echo "Reverse applying $PATCHDIR/$p"
			patch -V none -R -p1 < $PATCHDIR/$p
		    fi
		)
	    fi
	    ;;
    esac
)

# We have to bootstrap the 2.11 as using v7 assembler on the host.
# apout doesn't support the 2.10.1 as binary, but does the v7
# one. This will get us a binary that uses v7 system calls, which
# sadly is badly broken, even linking the 2.10.1 libc.
bootstrap_as() (
    local v7=$1 syscalls

    pprint 1 "Bootstrapping as"
    # bootstrap system calls
    cd $ROOT211/usr/src/bin/as
    export APOUT_ROOT=$ROOTV7
    $APOUT $v7/bin/as - -V as1?.s
    mv a.out as1.o
    $APOUT $v7/bin/as - -V as2?.s
    mv a.out as2.o
    # OK, now we need to create a mini libc that has just the
    # .o's that we need to make things link. Since this was
    # written at a low level, only need to create system calls
    # which helps a lot. Use as1.o and as2.o to find out the
    # undefined calls. They are all syscalls, and _end which
    # the linker creates.
    (
	syscalls=$($APOUT $v7/bin/nm as1.o as2.o | grep ' U ' | awk '{print $2;}' | sort -u | grep -v _end | sed -e 's/^_//')
	cd $ROOT211/usr/src/lib/libc/pdp/sys
	for i in $syscalls sbrk; do
	    [ -r $i.s ] || continue
	    export APOUT_ROOT=$ROOT211	 # to find right includes 2.11 cpp for long #defines
	    $APOUT $ROOT211/lib/cpp -E $i.s | sed -e 's;^#;/;' > x.s
	    export APOUT_ROOT=$ROOTV7	# to find /lib/as2
	    $APOUT $v7/bin/as -V x.s
	    mv a.out $i.o
	    rm -f x.s
	done
	cat <<EOF > x.s
/ do nothing signal call -- as doesn't need it to work, just resolve for bootstrapping
	.globl	_signal
_signal:
	rts	pc
EOF
	$APOUT $v7/bin/as -V x.s
	mv a.out signal.o
	rm -f x.s
	rm -f bootstrap.o
	# ld doesn't exit cleanly here for some reason
	# Both v7 and 2.11 Makefiles for libc ignore the status.
	$APOUT $v7/bin/ld -x -r -o bootstrap.o *.o || true
	cp bootstrap.o $ROOT211/usr/src/bin/as
	# We need to cleanup the .o's that we created. Otherwise builds
	# can fail due to permission issues and time issues.
	rm *.o
    )
    $APOUT $v7/bin/ld -n -s as1.o bootstrap.o -o as
    $APOUT $v7/bin/ld -n -s as2.o bootstrap.o -o as2
)

# Set the stage
[ -n "$FORCE_CLEAN" ] && cleanup
[ -d $TOOLS ] || mktools
unpack_211
[ -d $ROOT2101 ] || unpack_2101
[ -d $ROOTV7 ] || unpack_v7
[ -z $TEMPDIR ] && die oh no
clean_tree $TEMPDIR
[ -d $PATCHDIR ] || extract_patches
#
# OK. Now we have a good root for both 2.10.1BSD and 2.11pl195BSD with patches
# extracted.  We can start to walk them backwards to get back to the 2.11 as
# shipped, or as close as we can come to that in the absence of actual extant
# artifacts.
#
# If these were modern patches, then we'd just do patch -R 195 times. However,
# they aren't.  There's a number of files that were lost in this process since
# the instructions have you do things like in patch 180:
#

# Hack:
# Somewhere along the way, net_csv.s and mch_csv.s became hard-linked together.
# This causes patch 96 to fail, so unhard link them, even though the changes
# appear to be the same to both files in 96. Why are they hard linked? Who knows.
# They were separate files in 2.10.1.
rm $ROOT211/usr/src/sys/pdp/net_csv.s
cp -p $ROOT211/usr/src/sys/pdp/mch_csv.s $ROOT211/usr/src/sys/pdp/net_csv.s

# There's .o detritits in /usr/src/sys/autoconfig that gets in the way, so
# remove it. Also remove any libraries in the source tree as well as a known
# list of executables. None of these binaries could have been in 2.11BSD as
# released, though, since they all seem to have the newer symbol format with a
# string table (and toyset didn't happen for until patch 151).
find $ROOT211/usr/src -name \*.o -o -name lib\*.a | xargs rm -f
for i in \
    new/jove/doc/cmds.doc new/nmcoll/nmcoll.0 \
    sys/autoconfig/autoconfig sys/pdpstand/boot sys/pdpstand/mkfs \
    sys/pdpstand/restor sys/pdpstand/icheck sys/pdpstand/maketape \
    sys/pdpstand/toyset sys/sys/tags sys/pdp/symbols.sort \
    sys/pdpstand/xp.c.fuji160 sys/conf/NONET \
    games/hack/crypt ucb/w \
    usr.lib/libF77/profiled/Version usr.lib/libF77/mkindx \
    usr.lib/libF77/mkvers usr.lib/libI77/profiled/Version \
    usr.lib/libI77/mkindx usr.lib/libI77/mkvers \
    usr.lib/libI77/Version usr.lib/libU77/profiled/Version \
    usr.lib/libU77/mkindx usr.lib/libU77/mkvers \
    usr.lib/libU77/Version
do
    rm $ROOT211/usr/src/$i
done

# remove some detritis from sms running warp
rm $ROOT211/usr/games/lib/warp/warp.log $ROOT211/usr/games/lib/warp/warp.top
# kill old warp binary, it causes trouble later
rm $ROOT211/usr/games/warp

#
# Also, the KAZOO config was included through some unknown rev. It's not in
# the 195 patchlevel image we have, but patches 84 and 42 reference it. I
# can find no patch that removes it...
#
# The KAZOO in hints was created by taking GENERIC, applying the diffs from
# 2.10.1 between the two, and then hand-apply the conflicts as they were
# all pretty obvious. I'm not 100% up on things, but we may need to create
# other files to be able to build this.
#
cp $HINTSDIR/KAZOO $ROOT211/usr/src/sys/conf

patches=$(cd $PATCHDIR; ls | sort -rn)

[ -z "$STOP_BEFORE_PATCH" ] || die asked to stop

mkdir -p  ${SAVE}
mkdir -p ${LOGS}
rm $RECOVERY_LOG
touch $RECOVERY_LOG
set -e
trap 'die undo patch $p failed; pprint 1 patch $p failed' EXIT
export LOGS TEMP PATCHDIR ROOT211 ROOT2101 APOUT_ROOT HINTSDIR
touch $ROOT211/start-time
# patch 0 is for our fixups
for p in $patches 0; do
    undo_patch_level $p 2>&1 > $LOGS/$p.log
done

# The 2.11 pl 195 as(1) can't assemble the pl0 as(1), but the 2.10.1 can, so
# start there...
trap - EXIT
pprint 1 "Bootstrapping"
bootstrap_as $ROOTV7
# Put the building scripts on the target...
mkdir -p $ROOT211/usr/urbsd
cp $HINTSDIR/build.sh $HINTSDIR/build2.sh $ROOT211/usr/urbsd
pprint 1 "Fixing permissions and prepping tape"
(
    cd $ROOT211
    for i in bin etc usr/bin lib; do
	chmod +x $i/*
    done
    # rm libraries that are useless
    find lib usr/lib -name \*.a | xargs rm -f

    # push the date of the sources back to something approximately
    # correct: use the date of the announcement, which was posted at
    # Date: 14 Mar 91 07:31:17 GMT
    # So use Z for Zulu aka UTC/GMT.
    # Except don't. For all the files newer than the start time, reset them all to
    # Jan 15th, the newest date I could find in the 2.11BSDpl195 tree.
#    find usr/src -newer start-time | xargs touch -d 1991-01-15T15:00:00Z

    # remove executables in etc, usr/new and usr/local since most of
    # them were introduced after initial release. There's a number of
    # of them that could be built in the iniitial release, but don't
    # install properly...
    file etc/* | grep -v chown | grep PDP-11 | awk -F: '{print $1;}' | xargs rm
    rm -rf usr/new
    mkdir -p usr/new/lib usr/new/man usr/new/man/cat1
    rm -rf usr/local # New around patch 80...
    # These need to exist for install to work on some targets
    mkdir usr/man/man6 usr/man/manl usr/man/catn

    # Remove some binaries that shouldn't be there. tcsh was added later
    # and ns* utilities didn't build in pl0 (though maybe I'll need to add
    # a hack to get them). lint was broken in the release, and fixed in
    # patches starting with patch 14 where the 4.3 lint was ported over.
    # strcompact, symcompact and symdump were part of the binary format
    # in 159.
    # warp.old is due to an old install.
    rm -f bin/tcsh usr/bin/ns* usr/lib/nslookup.help usr/bin/lint
    rm -f usr/ucb/strcompact usr/ucb/symcompact usr/ucb/symdump
    rm -f usr/games/warp.old

    # Sendmail detritis that needs to be removed (alias kept around,
    # though it has a too-new date
    rm -f usr/lib/sendmail.cf usr/lib/sendmail.sr

    # /usr/msgs/bounds isn't created by default, remove the one we inherited from
    # the 2.11 pl 195 tape.
    rm usr/msgs/bounds
)

# Make the src.tar
(
    cd $ROOT211
    sudo tar cf ../src.tar .
)
# Make the tape to xfer to the 2.11pl195 system
# src.tar -> src.tap is hard coded, alas.
perl 2tape.pl

# And we're done: fireworks
pprint 1 "Welcome to ur2.11BSD"
